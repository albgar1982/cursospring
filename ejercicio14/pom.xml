<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath />
	</parent>
	<groupId>com.cursospring</groupId>
	<artifactId>ejercicio14</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ejercicio14</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>

		<!-- Estas dos siguientes dependencias traen muchos otros jar (que esten 
			Maven Dependencies, en la estructura del proyecto) -->
		<!-- Debajo del pom podemos ver la pesta'dependencies', donde se enumeran 
			las dependencias del pom. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<!-- Haciendo clic con el ctrl pulsado, podemos entrar en los pom de cada 
			dependencia y ver sus propias dependencias. En Maven, las dependencias transitivas 
			son aquellas dependencias que se aa tu proyecto de forma indirecta, como 
			consecuencia de las dependencias directas que declaras en tu POM. Imagina 
			que tu proyecto necesita la librería "A", así que declaras la dependencia 
			de "A" en tu POM. Pero resulta que "A" a su vez necesita la librería "B" 
			para funcionar. "B" se convierte entonces en una dependencia transitiva de 
			tu proyecto, aunque no la hayas declarado directamente. Así, 'spring-boot-starter' 
			es una dependencia directa y las que necesita son las transitivas. Maven 
			no solo descarga las directas, también las transitivas. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Para hacer una web o un Rest API. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- La sección <dependencyManagement> en el Effective POM define una lista 
			de dependencias que pueden ser utilizadas en el proyecto, NO declara dependencias 
			que se incluyan automáticamente en el proyecto. Si descomentas esta dependencia, 
			se aa las Maven Dependencies, compruen la pestaDependencies. En el Effective 
			POM buscando con ctrl + F 'angus-mail', verla versique Spring Boot va a ade 
			esta dependencia (de la que hace el manegement) y que coincide con la que 
			ha aen la pestaDependencies. -->
		<!-- <dependency> <groupId>org.eclipse.angus</groupId> <artifactId>angus-mail</artifactId> 
			</dependency> -->


		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- No le decimos versiporque spring boot starter ya incluye la suya. 
			Aun ashay que poner la dependencia. -->
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<url />
	<licenses>
		<license />
	</licenses>
	<developers>
		<developer />
	</developers>
	<scm>
		<connection />
		<developerConnection />
		<tag />
		<url />
	</scm>
</project>